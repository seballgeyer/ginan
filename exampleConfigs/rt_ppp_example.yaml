inputs:
  inputs_root: ./products/

  atx_files: [igs20.atx] # required
  igrf_files: [tables/igrf13coeffs.txt]
  # erp_files: [finals.data.iau2000.txt]
  # planetary_ephemeris_files: [tables/DE436.1950.2050]

  troposphere:
    gpt2grid_files: [tables/gpt_25.grd]

  tides:
    ocean_tide_loading_blq_files: [tables/OLOAD_GO.BLQ] # required if ocean loading is applied
    atmos_tide_loading_blq_files: [tables/ALOAD_GO.BLQ] # required if atmospheric tide loading is applied
    ocean_pole_tide_loading_files: [tables/opoleloadcoefcmcor.txt] # required if ocean pole tide loading is applied

  snx_files:
    - igs_satellite_metadata.snx
    - tables/sat_yaw_bias_rate.snx
    - tables/bds_yaw_modes.snx
    - tables/qzss_yaw_modes.snx
    # - "*_CRD.SNX"

  satellite_data:
    satellite_data_root: "https://<USER>:<PASS>@ntrip.data.gnss.ga.gov.au/"
    rtcm_inputs:
      ssr_antenna_offset: APC
      rtcm_inputs:
        - BCEP00BKG0
        - SSRA00CNE0

  gnss_observations:
    gnss_observations_root: "https://<USER>:<PASS>@ntrip.data.gnss.ga.gov.au/"
    rtcm_inputs:
      - ALIC00AUS0
      - MAW100ATA0
      - DARW00AUS0
      - STR200AUS0

outputs:
  metadata:
    config_description: rt_ppp_example_<HASH>
    user: your_NTRIP_username
    pass: your_NTRIP_password

  outputs_root: ./outputs/<CONFIG>

  trace:
    level: 2
    output_receivers: true
    output_network: true
    receiver_filename: <RECEIVER>_<CONFIG>_<YYYY><DDD><HH>.TRACE
    network_filename: <RECEIVER>_<CONFIG>_<YYYY><DDD><HH>.TRACE
    output_residuals: true
    output_residual_chain: true
    output_config: true
    output_initialised_states: false
    output_predicted_states: false

  gpx:
    output: true
    filename: <RECEIVER>_<CONFIG>_<YYYY><DDD><HH>.GPX

  pos:
    output: true
    filename: <RECEIVER>_<CONFIG>_<YYYY><DDD><HH>.POS

satellite_options:
  global:
    error_model: ELEVATION_DEPENDENT #  {uniform,elevation_dependent}
    code_sigma: 0 # Standard deviation of code measurements
    phase_sigma: 0 # Standard deviation of phase measurmeents
    models:
      pos:
        enable: true
        sources: [SSR]
      clock:
        enable: true
        sources: [SSR]
      phase_bias:
        enable: true

receiver_options:
  global:
    elevation_mask: 15 # (degrees)
    error_model: ELEVATION_DEPENDENT # {uniform,elevation_dependent}
    code_sigma: 0.3 # Standard deviation of code measurements (m)
    phase_sigma: 0.003 # Standard deviation of phase measurmeents (m)
    clock_codes: [AUTO, AUTO]
    zero_dcb_codes: [AUTO, AUTO]
    rec_reference_system: GPS
    models:
      phase_bias:
        enable: false
      troposphere: # Tropospheric modelling accounts for delays due to refraction of light in water vapour
        enable: true
        models: [gpt2] # List of models to use for troposphere [standard,sbas,vmf3,gpt2,cssr]
      tides:
        enable:     true # Enable modelling of tidal disaplacements
        solid:      true # Enable solid Earth tides
        otl:        true # Enable ocean tide loading
        atl:        true # Enable atmospheric tide loading
        spole:      true # Enable solid Earth pole tides
        opole:      true # Enable ocean pole tides
      ionospheric_components:
        use_2nd_order:  true
        use_3rd_order:  true

  ALIC:
    receiver_type: "SEPT POLARX5"
    antenna_type: "TWIVC6050       NONE"
    apriori_position: [-4052052.7352, 4212835.9833, -2545104.5853]
    models:
      eccentricity:
        enable: true
        offset: [0.0000, 0.0000, 0.0250]

  MAW1:
    receiver_type: "SEPT POLARX5"
    antenna_type: "AOAD/M_T        AUST"
    apriori_position: [1111287.1380, 2168911.2970, -5874493.6440]
    models:
      eccentricity:
        enable: true
        offset: [0.0000, 0.0000, 0.0035]

  DARW:
    receiver_type: "SEPT POLARX5"
    antenna_type: "JAVRINGANT_DM   NONE"
    apriori_position: [-4091359.6055, 4684606.4197, -1408579.1195]
    models:
      eccentricity:
        enable: true
        offset: [0.0000, 0.0000, 0.0000]

  STR2:
    receiver_type: "TRIMBLE ALLOY"
    antenna_type: "LEIAR25.R3      NONE"
    apriori_position: [-4467075.2351, 2683011.8470, -3667007.0408]
    models:
      eccentricity:
        enable: true
        offset: [0.0000, 0.0000, 0.0000]

processing_options:
  process_modes:
    preprocessor: true # Preprocessing and quality checks
    spp: true # Perform SPP on receiver data
    ppp: true # Perform PPP network or end user mode
    ionosphere: false # Compute Ionosphere models based on GNSS measurements
    slr: false # Process SLR observations

  epoch_control:
    epoch_interval: 10
    max_rec_latency: 1

  gnss_general:
    add_eop_component: true
    use_primary_signals: true
    sys_options:
      gps:
        process: true
        reject_eclipse: false
        code_priorities: [L1W, L1C, L2W, L2S]
        #code_priorities: [L1W, L1C, L2W, L2S, L5Q, L5X]

      gal:
        process: true
        reject_eclipse: false
        code_priorities: [L1C, L1X, L5Q, L5X]

      glo:
        process: true
        reject_eclipse: false
        code_priorities: [L1C, L1P, L2C, L2P]

    # phase_measurements:
      # process: false

  preprocessor: # Configurations for the kalman filter and its sub processes
    cycle_slips: # Cycle slips may be detected by the preprocessor and measurements rejected or ambiguities reinitialised
      mw_process_noise: 0 # Process noise applied to filtered Melbourne-Wubenna measurements to detect cycle slips
      slip_threshold: 0.05 # Value used to determine when a slip has occurred
    preprocess_all_data: true

  spp:
    # always_reinitialise: false # Reset SPP state to zero to avoid potential for lock-in of bad states
    max_lsq_iterations: 12 # Maximum number of iterations of least squares allowed for convergence
    outlier_screening:
      raim: true # Enable Receiver Autonomous Integrity Monitoring
      max_gdop: 30 # Maximum dilution of precision before error is flagged

  ppp_filter:
    outlier_screening:
      chi_square:
        enable: false # Enable Chi-square test
        mode: innovation # Chi-square test mode {none,innovation,measurement,state}
      prefit:
        max_iterations: 3 # Maximum number of measurements to exclude using prefit checks before attempting to filter
        omega_test: false # Enable omega-test
        sigma_check: true # Enable sigma check
        state_sigma_threshold: 4 # Sigma threshold for states
        meas_sigma_threshold: 4 # Sigma threshold for measurements
      postfit:
        max_iterations: 10 # Maximum number of measurements to exclude using postfit checks while iterating filter
        omega_test: false # Enable omega-test
        sigma_check: true # Enable sigma check
        state_sigma_threshold: 6 # Sigma threshold for states
        meas_sigma_threshold: 6 # Sigma threshold for measurements

    ionospheric_components: # Slant ionospheric components
      common_ionosphere: true # Use the same ionosphere state for code and phase observations
      use_gf_combo: false # Combine 'uncombined' measurements to simulate a geometry-free solution
      use_if_combo: false # Combine 'uncombined' measurements to simulate an ionosphere-free solution

    chunking:
      by_receiver: true # Split large filter and measurement matrices blockwise by receiver ID to improve processing speed
      by_satellite: false # Split large filter and measurement matrices blockwise by satellite ID to improve processing speed
      size: 0

    rts: # Rauch-Tung-Striebel (RTS) backwards smoothing
      enable: false
      lag: -1
      # interval:                 86400
      inverter: LDLT # Inverter to be used within the rts processor, which may provide different performance outcomes in terms of processing time and accuracy and stability
      filename: <CONFIG>_<RECEIVER>.rts

    periodic_reset:
      # enable:                 true
      # interval:               86400
      # states:                 [REC_POS]

  model_error_handling:
    meas_deweighting: # Measurements that are outside the expected confidence bounds may be deweighted so that outliers do not contaminate the filtered solution
      deweight_factor: 1000 # Factor to downweight the variance of measurements with statistically detected errors
      enable: true # Enable deweighting of all rejected measurement
    state_deweighting: # Any "state" errors cause deweighting of all measurements that reference the state
      deweight_factor: 1000 # Factor to downweight the variance of measurements with statistically detected errors
      enable: true # Enable deweighting of all referencing measurements
    error_accumulation:
      enable: true
      receiver_error_count_threshold: 4
      receiver_error_epochs_threshold: 4
    ambiguities:
      phase_reject_limit: 2 # Reset ambiguity after 2 large fractional residuals are found (replaces phase_reject_count:)
      reset_on: # Reset ambiguities when slip is detected by the following
        gf: true # GF test
        lli: true # LLI test
        mw: true # MW test
        scdia: true # SCDIA test
        retrack: true

estimation_parameters:

  receivers:
    global:
      pos:
        estimated: [true]
        sigma: [100]
        # process_noise:        [30]
      pos_rate: # Velocity
        estimated: [false] # [bools] Estimate state in kalman filter
        sigma: [0] # [floats] Apriori sigma values
        process_noise: [0] # [floats] Process noise sigmas
        # process_noise_dt:     SECOND  # (enum) Time unit for process noise - sqrt_sec, sqrt_day etc
        # apriori_val:          [0]     # [floats] Apriori state values
        # mu:                   [0]     # [floats] Desired mean value for gauss markov states
        # tau:                  [-1]    # [floats] Correlation times for gauss markov noise, defaults to -1 -> inf (Random Walk)
      clock:
        estimated: [true]
        sigma: [1000]
        process_noise: [100]
      clock_rate:
        estimated: [false]
        sigma: [0.005]
        process_noise: [1e-4]
      ambiguities:
        estimated: [true]
        sigma: [1000]
        process_noise: [0]
        outage_limit: [120]
      ion_stec: # Ionospheric slant delay
        estimated: [true] # Estimate state in kalman filter
        sigma: [200] # Apriori sigma values
        process_noise: [10] # Process noise sigmas
        outage_limit: [120]
        sigma_limit: [1000]
      trop:
        estimated: [true]
        sigma: [0.3]
        process_noise: [0.0001]
      trop_grads:
        estimated: [true]
        sigma: [0.03]
        process_noise: [1.0E-6]
      code_bias:
        estimated: [true]
        sigma: [20]
        process_noise: [0]
      phase_bias:
        estimated: [false]
        sigma: [10]
        process_noise: [0]
      gps:
        l5q:
          phase_bias:
            estimated: [true]
            sigma: [10]
            process_noise: [0.001]

mongo: # Mongo is a database used to store results and intermediate values for later analysis and inter-process communication
  enable: primary # Enable and connect to mongo database {none,primary,secondary,both}
  primary_uri: mongodb://localhost:27017 # Location and port of the mongo database to connect to
  primary_database: <CONFIG>
  primary_suffix: "" # Suffix to append to database elements to make distinctions between runs for comparison
  # secondary_database:   <CONFIG>
  # secondary_suffix:     ""                              # Suffix to append to database elements to make distinctions between runs for comparison
  # secondary_uri:        mongodb://localhost:27017       # Location and port of the mongo database to connect to
  # output_config:        primary                         # Output config {none,primary,secondary,both}
  output_components: primary # Output components of measurements {none,primary,secondary,both}
  output_states: primary # Output states {none,primary,secondary,both}
  output_measurements: primary # Output measurements and their residuals {none,primary,secondary,both}
  output_test_stats: primary # Output test statistics {none,primary,secondary,both}
  delete_history: primary # Drop the collection in the database at the beginning of the run to only show fresh data {none,primary,secondary,both}
  output_trace: primary
